<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://ew/locale/ew.dtd">

<dialog id="ew.dialog.newinstances" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    buttons="accept,cancel"
    ondialogaccept="return launch();"
    ondialogcancel="return true;"
    onload="return init();"
    title="Launch new instance(s)"
    buttonlabelaccept="Launch">

    <script type="application/x-javascript" src="chrome://ew/content/utils.js" />
    <script type="application/x-javascript" src="chrome://ew/content/types.js" />
    <script type="application/x-javascript">
    <![CDATA[

    function launch()
    {
        ListBox.done();
        this.eniListView.done();
        this.retVal.imageId = $('ew.amiId').value;
        this.retVal.kernelId = $("ew.aki").value;
        this.retVal.ramdiskId = $("ew.ari").value;
        this.retVal.instanceType = $("ew.instancetypelist").selectedItem.value;
        this.retVal.minCount = $("ew.min").value.trim();
        this.retVal.maxCount = $("ew.max").value.trim();
        this.retVal.tag = $("ew.tag").value.trim();
        this.retVal.name = $("ew.name").value.trim();
        this.retVal.disableApiTermination = $("ew.disableApiTermination").checked;
        this.retVal.instanceInitiatedShutdownBehavior = $("ew.shutdown").value;
        this.retVal.clientToken = $("ew.token").value;
        this.retVal.monitoringEnabled = $("ew.monitor").checked;
        this.retVal.userData = $("ew.userdata").value;
        this.retVal.additionalInfo = $("ew.properties").value;
        this.retVal.subnetId = $("ew.subnetId").value;
        this.retVal.privateIpAddress = $("ew.ipAddress").value.trim();
        this.retVal.keyName = $("ew.keypairlist").value;
        this.retVal.availabilityZone = this.azMenu.value;
        this.retVal.tenancy = this.tnMenu.value;
        this.retVal.securityGroupNames = ListBox.selectedItems;
        this.retVal.instanceProfile = $("ew.roles").value;
        this.retVal.ebsOptimized = $("ew.ebsOptimized").checked;
        this.retVal.placementGroup = $("ew.placementGroup").value;

        if (this.retVal.spotRequest) {
            this.retVal.spotPrice = parseFloat($('ew.spotPrice').value);
            this.retVal.spotType = $('ew.spotType').checked ? "persistent" : "";
            this.retVal.validFrom = new Date($('ew.validFrom').value);
            this.retVal.validUntil = new Date($('ew.validUntil').value);
            this.retVal.launchGroup = $('ew.launchGroup').value;
            this.retVal.availZoneGroup = $('ew.availZoneGroup').value;

            if (!this.retVal.imageId) {
                alert('Cannot proceed without AMI selected');
                $("ew.tabs").selectedIndex = 6;
                return false;
            }
            if (this.retVal.spotPrice <= 0) {
                alert('Max hourly price must be spcified for the Spot Request');
                $("ew.tabs").selectedIndex = 6;
                return false;
            }
            var now = (new Date()).getTime() - 86400000;
            if (isNaN(this.retVal.validFrom) || this.retVal.validFrom.getTime() < now) this.retVal.validFrom = null;
            if (isNaN(this.retVal.validUntil) || this.retVal.validUntil.getTime() < now) this.retVal.validUntil = null;
            if (this.retVal.validFrom && this.retVal.validUntil && this.retVal.validUntil.getTime() < this.retVal.validFrom.getTime()) {
                alert('Invalid date range specified for the Spot Request');
                $("ew.tabs").selectedIndex = 6;
                return false;
            }
            this.retVal.tenancy = '';
            this.retVal.clientToken = '';
            this.retVal.additionalInfo = '';
        }

        var device = {};
        device.type = $("ew.deviceType").value;
        device.deviceName = $("ew.deviceName").value;
        if (device.type && !device.deviceName) {
            alert('Device block mapping type was specified but no device name');
            $("ew.tabs").selectedIndex = 3;
            return false;
        }
        switch (device.type) {
        case "snapshot":
             device.snapshotId = $("ew.snapshotId").value;
             device.deleteOnTermination = $("ew.deleteOnTermination").checked;
             if (!device.snapshotId) {
                 alert('Please specify snapshot for the attaching device ' + device.deviceName);
                 $("ew.tabs").selectedIndex = 3;
                 return false;
             }
             this.retVal.blockDeviceMapping = device;
             break;

        case "volume":
             device.volumeId = $("ew.volumeId").value;
             if (!device.volumeId) {
                 alert('Please specify volume for the attaching device ' + device.deviceName);
                 $("ew.tabs").selectedIndex = 3;
                 return false;
             }
             this.retVal.attachVolume = device;
            break;

        case "new":
             device.volumeSize = $("ew.volumeSize").value;
             if (!device.volumeSize) {
                 alert('Please specify new volume size in GB for the attaching device ' + device.deviceName);
                 $("ew.tabs").selectedIndex = 3;
                 return false;
             }
             this.retVal.blockDeviceMapping = device;
             break;

        case "virtual":
             device.virtualName = $("ew.virtualName").value;
             if (!device.virtualName) {
                 alert('Please specify virtual device name for the attaching device ' + device.deviceName);
                 $("ew.tabs").selectedIndex = 3;
                 return false;
             }
             this.retVal.blockDeviceMapping = device;
             break;
        }

        var eni = {};
        eni.type = $("ew.eniType").value;
        eni.deviceIndex = parseInt($("ew.eniIndex").value);
        eni.deleteOnTermination = $("ew.eniDelete").checked;
        if (eni.type && !eni.deviceIndex) {
            alert('Device Index for ENI must be specified');
            $("ew.tabs").selectedIndex = 4;
            return false;
        }
        if (eni.type && this.retVal.maxCount > 1) {
            alert('Cannot attach ENI to multiple instances, must run only 1 instance');
            $("ew.tabs").selectedIndex = 4;
            return false;
        }
        switch (eni.type) {
        case "eni":
             eni.eniId = $("ew.eniId").value;
             if (!eni.eniId) {
                 alert('Please specify existing ENI to attach to the instance');
                 $("ew.tabs").selectedIndex = 4;
                 return false;
             }
             this.retVal.networkInterface = eni;
             break;

        case "new":
             eni.privateIpAddress = $("ew.eniIpAddress").value.replace(/[ ]+/g,'');
             eni.secondaryIpAddresses = $("ew.eniIpAddress2").value.replace(/[ ]+/g,'').split(",");
             eni.description = $("ew.eniDescr").value;
             eni.subnetId = $("ew.eniSubnet").value;
             eni.securityGroups = this.eniListView.selectedItems;
             this.retVal.networkInterface = eni;
             break;
        }

        var minval = parseInt(this.retVal.minCount);
        if (isNaN(minval) || minval <= 0 || minval > this.retVal.max) {
            alert("Minimum value must be a positive integer between 1 and " + this.retVal.max);
            minbox.select();
            $("ew.tabs").selectedIndex = 0;
            return false;
        }
        var maxval = parseInt(this.retVal.maxCount);
        if (isNaN(maxval) || maxval <= 0 || maxval > this.retVal.max) {
            alert("Maximum value must be a positive integer between 1 and " + this.retVal.max);
            maxbox.select();
            $("ew.tabs").selectedIndex = 0;
            return false;
        }
        if (minval > maxval) {
            alert("Maximum value may not be smaller than minimum value between 1 and " + maxval);
            minbox.select();
            $("ew.tabs").selectedIndex = 0;
            return false;
        }

        if (!isWindows(this.image.platform) &&
            !this.retVal.keyName &&
            !confirm('No keypair is specified for the instance, access will not be possible without it.  Do you want to continue?')) {
            $("ew.tabs").selectedIndex = 0;
            return false;
        }

        if (this.retVal.subnetId == "" && this.vpcMenu.value != "") {
            alert("No subnet selected for VPC. Please select a subnet to continue.");
            $("ew.tabs").selectedIndex = 1;
            return false;
        }

        if (this.vpcMenu.value != "") {
            var vpc = this.core.findModel('vpcs', this.vpcMenu.value);
            if (vpc && vpc.instanceTenancy == "dedicated") {
                if (!confirm("You have chosen to launch your instance(s) in VPC with dedicated tenancy.\n\n" +
                         "This choice can add a signficant amount of cost to your EC2 charges "+
                         "(see http://aws.amazon.com/dedicated-instances/). Are you sure you want to continue?")) {
                    return false;
                }
            }
        }

        if (this.retVal.tenancy == "dedicated") {
            if (this.retVal.instanceType.match('micro')) {
                alert('Cannot run this instance type in dedicated mode');
                return false;
            }
            if (this.vpcMenu.value == "") {
                alert('For dedicated tenancy to work please choose a VPC');
                $("ew.tabs").selectedIndex = 1;
                return false;
            }
            if (!confirm("You have chosen to launch your instance(s) with dedicated tenancy.\n\n" +
                         "This choice can add a signficant amount of cost to your EC2 charges "+
                         "(see http://aws.amazon.com/dedicated-instances/). Are you sure you want to continue?")) {
                return false;
            }
        }
        if (this.retVal.name) {
            this.retVal.tag += (this.retVal.tag ? "," : "") + "Name:" + this.retVal.name;
        }
        this.retVal.ok = true;
        return true;
    }

    function deviceSelected()
    {
        $("ew.virtualName").disabled = $("ew.snapshotId").disabled = $("ew.volumeSize").disabled = $("ew.deleteOnTermination").disabled = $("ew.volumeId").disabled = true;
        switch ($("ew.deviceType").value) {
        case "snapshot":
             $("ew.snapshotId").disabled = $("ew.deleteOnTermination").disabled = false;
             $("ew.volumeSize").disabled = false;
             break;
        case "new":
             $("ew.volumeSize").disabled = $("ew.deleteOnTermination").disabled = false;
             break;
        case "virtual":
             $("ew.virtualName").disabled = false;
             break;
        case "volume":
             $("ew.volumeId").disabled = $("ew.deleteOnTermination").disabled = false;
             break;
        }
    }

    function akiSelected()
    {
        var akiList = $("ew.aki");
        var ariList = $("ew.ari");
        var akiRegex = regExs["aki"];
        var ariRegex = regExs["ari"];
        akiList.removeAllItems();
        akiList.appendItem("");
        ariList.removeAllItems();
        ariList.appendItem("");

        if (this.image && !isWindows(this.image.platform)) {
            for (var i in images) {
                if (images[i].id.match(akiRegex)) {
                    akiList.appendItem(images[i].toString(), images[i].id);
                    continue;
                }
                if (images[i].id.match(ariRegex)) {
                    ariList.appendItem(images[i].toString(), images[i].id);
                    continue;
                }
            }
            akiList.value = this.image.aki;
            ariList.value = this.image.ari;
        }
    }

    function eniSelected()
    {
        $("ew.eniIndex").disabled = $("ew.eniDelete").disabled = true;
        $("ew.eniId").disabled = $("ew.eniDescr").disabled = true;
        $("ew.eniIpAddress").disabled = $("ew.eniIpAddress2").disabled = $("ew.eniSubnet").disabled = true;
        $("ew.eniSubnet").value = '';
        switch ($("ew.eniType").value) {
        case "eni":
             $("ew.eniId").disabled = $("ew.eniIndex").disabled = $("ew.eniDelete").disabled = false;
             break;
        case "new":
             $("ew.eniIndex").disabled = $("ew.eniDelete").disabled = false;
             $("ew.eniIpAddress").disabled = $("ew.eniIpAddress2").disabled = false;
             $("ew.eniDescr").disabled = $("ew.eniSubnet").disabled = $("ew.eniGroups").disabled = false;
             break;
        }
    }

    function eniSubnetSelected()
    {
        // Re-create new list
        var box = $('ew.eniGroupBox');
        var groups = $('ew.eniGroups');
        if (groups) {
            box.removeChild(groups);
        }
        var groups = document.createElement('listbox');
        groups.setAttribute('id', 'ew.eniGroups');
        groups.setAttribute('flex', '1');
        box.appendChild(groups);

        var subnet = this.core.findModel('subnets', $("ew.eniSubnet").value);
        if (!subnet) return;
        this.eniListView.init({ core:this.core, name:'ew.eniGroups', title:'Groups', items:this.core.queryModel('securityGroups', 'vpcId', subnet.vpcId) });
    }

    function vpcSelected()
    {
        var vpcId = this.vpcMenu.value;
        var az = this.azMenu.value

        // Reset subnets
        this.subnetMenu.removeAllItems();
        $("ew.ipAddress").disabled = true;
        $("ew.eniType").disabled = $("ew.eniIndex").disabled = $("ew.eniDelete").disabled = true;

        if (vpcId) {
            var subnets = this.core.queryModel('subnets', 'vpcId', vpcId);
            for ( var i in subnets) {
                if (az == "" || az == subnets[i].availabilityZone) {
                    this.subnetMenu.appendItem(subnets[i].toString(), subnets[i].id)
                }
            }
            this.subnetMenu.selectedIndex = 0;
            $("ew.ipAddress").disabled = false;
            $("ew.eniType").disabled = $("ew.eniIndex").disabled = $("ew.eniDelete").disabled = false;
        }

        // Re-create new list
        var box = $('ew.groups.box');
        var groups = $('ew.groups');
        if (groups) {
            box.removeChild(groups);
        }
        var groups = document.createElement('listbox');
        groups.setAttribute('id', 'ew.groups');
        groups.setAttribute('flex', '1');
        box.appendChild(groups);

        ListBox.init({ core:this.core, name:'ew.groups', title:'Groups', items:this.core.queryModel('securityGroups', 'vpcId', this.vpcMenu.value) });
    }

    function loadUserDataFromFile(fBinary)
    {
        var file = this.core.promptForFile("Load user data");
        if (!file) return;
        var data = "";
        if (fBinary) {
            data = "Base64:" + this.core.getBinaryFileContents(file, true);
        } else {
            data = this.core.getFileContents(file)
        }
        $("ew.userdata").value = data;
    }

    function init()
    {
        this.retVal = window.arguments[0];
        this.core = this.retVal.core;
        this.image = this.retVal.image;
        this.azMenu = $("ew.azId");
        this.tnMenu = $("ew.tenancy");
        this.vpcMenu = $("ew.vpcId");
        this.subnetMenu = $("ew.subnetId");
        this.eniListView = new ListView();
        this.imagesListView = new ListView();

        this.images = this.core.queryModel('images');
        var volumes = this.core.queryModel('volumes');
        var keypairs = this.core.queryModel('keypairs');
        var types = this.core.getInstanceTypes(this.image ? this.image.arch : "");
        var availZones = this.core.queryModel('availabilityZones');
        var vpcs = this.core.queryModel('vpcs');
        var snapshots = this.core.queryModel('snapshots', "status", "completed");
        var subnets = this.core.queryModel('subnets');
        var enis = this.core.queryModel('networkInterfaces');
        var roles = this.core.queryModel('instanceProfiles');
        var pgroups = this.core.queryModel('placementGroups');

        var rolesMenu = $("ew.roles");
        rolesMenu.appendItem("<none>", "");
        for (var i in roles) {
            rolesMenu.appendItem(roles[i].name, roles[i].name);
        }
        rolesMenu.selectedIndex = 0;

        var keypairMenu = $("ew.keypairlist");
        keypairMenu.appendItem("<none>", null);
        for ( var i in keypairs) {
            keypairMenu.appendItem(keypairs[i].name, keypairs[i].name);
        }
        keypairMenu.selectedIndex = 0;

        var typeMenu = $("ew.instancetypelist");
        for (var i in types) {
            typeMenu.appendItem(types[i].name, types[i].id);
        }
        typeMenu.selectedIndex = 0;

        this.azMenu.appendItem("<any>", null);
        for ( var i in availZones) {
            this.azMenu.appendItem(availZones[i].name + " (" + availZones[i].state + ")", availZones[i].name);
        }
        this.azMenu.selectedIndex = 0;

        this.vpcMenu.appendItem("Traditional EC2 Networking", "");
        for (var i in vpcs) {
            this.vpcMenu.appendItem(vpcs[i].toString(), vpcs[i].id);
        }
        this.vpcMenu.selectedIndex = 0;
        this.vpcSelected();

        var snapshotMenu = $("ew.snapshotId");
        for ( var i in snapshots) {
            snapshotMenu.appendItem(snapshots[i].toString(), snapshots[i].id);
        }
        snapshotMenu.selectedIndex = 0;

        var volumeMenu = $("ew.volumeId");
        for ( var i in volumes) {
            volumeMenu.appendItem(volumes[i].toString(), volumes[i].id);
        }
        volumeMenu.selectedIndex = 0;

        var eniSubnetMenu = $("ew.eniSubnet");
        eniSubnetMenu.appendItem("<none>", "")
        for ( var i in subnets) {
            eniSubnetMenu.appendItem(subnets[i].toString(), subnets[i].id)
        }
        eniSubnetMenu.selectedIndex = 0;

        var eniMenu = $("ew.eniId");
        for ( var i in enis) {
            eniMenu.appendItem(enis[i].toString(), enis[i].id)
        }
        eniMenu.selectedIndex = 0;

        var pgMenu = $("ew.placementGroup");
        pgMenu.appendItem("<none>", "")
        for ( var i in pgroups) {
            pgMenu.appendItem(pgroups[i].toString(), pgroups[i].name)
        }
        pgMenu.selectedIndex = 0;

        // Populate the AKI and ARI lists
        akiSelected();

        $("ew.min").setAttribute('max', this.retVal.max);
        $("ew.max").setAttribute('max', this.retVal.max);
        $("ew.amiId").value = this.image ? this.image.id : "";
        $("ew.amiName").value = this.image ? this.image.name : "";
        $("ew.min").focus();

        var imgMenu = $("ew.images.type");
        var filters = this.core.getImageFilters();
        for ( var i in filters) {
            imgMenu.appendItem(filters[i].name, filters[i].value)
        }
        imgMenu.selectedIndex = 0;
        imagesFilterChanged();
        if (!this.image) {
            $('ew.tabs').selectedIndex = 6;
        }

        if (this.retVal.spotRequest) {
            var tab = document.createElement('tab');
            tab.setAttribute('label', 'Spot Request');
            $('ew.tabs').appendChild(tab);
            $('ew.tabs').selectedIndex = 7;

            var imgMenu = $("ew.imageType");
            var filters = this.core.getImageFilters();
            for (var i in filters) {
                imgMenu.appendItem(filters[i].name, filters[i].value)
            }
            imgMenu.selectedIndex = 0;

            if (!this.image) {
                spotFilterChanged();
            } else {
                var imageMenu = $("ew.imageId");
                imageMenu.appendItem(this.image.toString(), this.image.id)
                imageMenu.selectedIndex = 0;
            }
        }
    }

    function spotFilterChanged()
    {
        var list = this.core.getImagesByType(this.images, $('ew.imageType').value);
        var imageMenu = $("ew.imageId");
        imageMenu.removeAllItems();
        for (var i in list) {
            imageMenu.appendItem(list[i].toString(), list[i].id)
        }
        imageMenu.selectedIndex = 0;
        spotImageSelected();
    }

    function spotImageSelected()
    {
        if (!$('ew.imageId').value) return;
        this.image = this.core.findObject(this.images, $('ew.imageId').value);
        imageChanged();
    }

    function imageChanged()
    {
        if (!this.image) return;
        $("ew.amiId").value = this.image.id;
        $("ew.amiName").value = this.image.name || "";
        akiSelected();
    }

    function imagesFilterChanged()
    {
        var me = this;
        var list = this.core.getImagesByType(this.images, $("ew.images.type").value);
        list = filterList(list, $('ew.images.search').value);
        this.imagesListView.init({ core:this.core, width: 600, rows:25, name:'ew.images', items:list, multiple: false, onclick: function(item) {
           me.image = item;
           me.imageChanged();
        }
        });
    }
    ]]>
    </script>

    <tabbox flex="1" style="padding: 20px;" >
       <tabs id="ew.tabs">
         <tab label="General" selected="true" />
         <tab label="VPC/Security"  />
         <tab label="User Data" />
         <tab label="Attach Device" />
         <tab label="Attach ENI" />
         <tab label="Options" />
         <tab label="Images" />
       </tabs>

       <tabpanels flex="1" style="padding: 20px;-moz-appearance:tabpanels;" >
        <tabpanel orient="vertical" flex="1" style="-moz-appearance:tabpanel;" align="center">
        <grid flex="1">
            <columns flex="1">
                <column />
                <column />
            </columns>
            <rows flex="1">
                <row>
                    <label control="ew.amiId" value="AMI ID:" />
                    <label id="ew.amiId" />
                </row>
                <row>
                    <label control="ew.amiName" value="AMI Name:" />
                    <label id="ew.amiName" />
                </row>
                <row>
                    <label control="ew.name" value="Instance Name:" />
                    <textbox id="ew.name" size="30" value="" tooltiptext="Name to distinguish it from other running instances" />
                </row>
                <row>
                    <label control="ew.instancetypelist" value="Instance Type:" />
                    <menulist id="ew.instancetypelist" crop="end" sizetopopup="none" style="max-width: 450px;"/>
                </row>
                <row>
                    <label control="ew.tenancy" value="Instance Tenancy:" />
                    <menulist id="ew.tenancy" size="30" >
                         <menupopup>
                            <menuitem label="Standard" value="default"/>
                            <menuitem label="Dedicated" value="dedicated"/>
                         </menupopup>
                    </menulist>
                </row>
                <row>
                    <label control="ew.azId" value="Availability Zone:" />
                    <menulist id="ew.azId" oncommand="vpcSelected();" />
                </row>
                <row>
                    <label control="ew.placementGroup" value="Placement Group:" />
                    <menulist id="ew.placementGroup" />
                </row>
                <row>
                    <label control="ew.keypairlist" value="KeyPair:" />
                    <menulist id="ew.keypairlist" />
                </row>
                <row>
                    <label control="ew.roles" value="IAM Role:" />
                    <menulist id="ew.roles" crop="end" sizetopopup="none" style="max-width: 450px;" tooltiptext="The name of the IAM Instance Profile (IIP) to associate with the instances."/>
                </row>
                <row>
                    <label control="ew.min" value="Start Instances:" />
                    <hbox>
                        <label control="ew.min" value="Min:" />
                        <textbox id="ew.min" size="10" value="1" type="number" min="0" />
                        <label control="ew.max" value="Max:" />
                        <textbox id="ew.max" size="10" value="1" type="number" min="0" />
                    </hbox>
                </row>
            </rows>
        </grid>
        </tabpanel>

        <tabpanel orient="vertical" flex="1" style="-moz-appearance:tabpanel;" align="center">
        <vbox flex="1">
        <groupbox flex="1" id="ew.vpc.box">
            <caption label="&ew.captions.newinstances.vpc.label;" />
            <grid flex="1">
                <columns flex="1">
                    <column flex="1" />
                    <column flex="1" />
                </columns>
                <rows flex="1">
                    <row>
                       <label control="ew.vpcId" value="VPC: " />
                       <menulist id="ew.vpcId" oncommand="vpcSelected();" />
                    </row>
                    <row>
                       <label control="ew.subnetId" value="Subnet: " />
                       <menulist id="ew.subnetId" />
                    </row>
                    <row>
                       <label control="ew.ipAddress" value="IP Address: " />
                       <textbox id="ew.ipAddress" size="30" />
                    </row>
                </rows>
            </grid>
        </groupbox>

        <groupbox flex="1" id="ew.groups.box">
          <caption label="&ew.captions.images.launchsecgroups.label;" />
          <label control="ew.groups" value="Security Groups:" />
        </groupbox>
        </vbox>
        </tabpanel>

        <tabpanel orient="vertical" flex="1" style="-moz-appearance:tabpanel;" align="center">
         <vbox flex="1">
            <label control="ew.userdata" value="User Data:" />
            <textbox id="ew.userdata" multiline="true" cols="70" rows="25" wrap="false" style="font-family: monospace;" />
            <hbox>
            <button label="Open Text File" oncommand="loadUserDataFromFile(false);" style="min-width:25px" />
            <button label="Open Binary File" oncommand="loadUserDataFromFile(true);" />
            </hbox>
         </vbox>
        </tabpanel>

        <tabpanel orient="vertical" flex="1" style="-moz-appearance:tabpanel;" align="center">
         <grid flex="1">
            <columns flex="1">
                <column />
                <column />
            </columns>
            <rows flex="1">
                <row>
                    <label control="ew.deviceType" value="Device type to attach:" />
                    <menulist id="ew.deviceType" onselect="deviceSelected()">
                       <menupopup>
                         <menuitem label="None" value="" />
                         <menuitem label="EBS Snapshot" value="snapshot" />
                         <menuitem label="Virtual" value="virtual" />
                         <menuitem label="Root EBS Volume" value="new" />
                         <menuitem label="Existing EBS Volume" value="volume" />
                       </menupopup>
                    </menulist>
                </row>
                <row>
                    <label control="ew.deviceName" value="Device Name (e.g. /dev/sda2):" />
                    <textbox id="ew.deviceName" size="40" />
                </row>
                <row>
                   <separator style="height:1px;width:100%;background-color:#cccccc;margin:5px 0px 5px 0px;"/>
                   <separator style="height:1px;width:100%;background-color:#cccccc;margin:5px 0px 5px 0px;"/>
                </row>
                <row>
                    <label control="ew.virtualName" value="Virtual Name (e.g. ephemeral0):" />
                    <textbox id="ew.virtualName" size="40" disabled="true" />
                </row>
                <row>
                   <separator style="height:1px;width:100%;background-color:#cccccc;margin:5px 0px 5px 0px;"/>
                   <separator style="height:1px;width:100%;background-color:#cccccc;margin:5px 0px 5px 0px;"/>
                </row>
                <row>
                    <label control="ew.volumeSize" value="New Volume Size (GB):" />
                    <textbox id="ew.volumeSize" size="40" type="number" min="1" disabled="false" />
                </row>
                <row>
                   <separator style="height:1px;width:100%;background-color:#cccccc;margin:5px 0px 5px 0px;"/>
                   <separator style="height:1px;width:100%;background-color:#cccccc;margin:5px 0px 5px 0px;"/>
                </row>
                <row>
                    <label control="ew.snapshotId" value="Snapshot:" />
                    <menulist id="ew.snapshotId" crop="end" sizetopopup="none" style="max-width: 450px;" disabled="true" />
                </row>
                <row>
                    <label control="ew.volumeId" value="Volume:" />
                    <menulist id="ew.volumeId" crop="end" sizetopopup="none" style="max-width: 450px;" disabled="true" />
                </row>
                <row>
                    <label control="ew.deleteOnTermination" value="Delete On Termination:" />
                    <checkbox id="ew.deleteOnTermination" checked="false" disabled="true" />
                </row>
            </rows>
         </grid>
        </tabpanel>

        <tabpanel orient="vertical" flex="1" style="-moz-appearance:tabpanel;" align="center">
         <grid flex="1">
            <columns flex="1">
                <column />
                <column />
            </columns>
            <rows flex="1">
                <row>
                    <label control="ew.eniType" value="Network Interface to attach:" />
                    <menulist id="ew.eniType" onselect="eniSelected()">
                       <menupopup>
                         <menuitem label="None" value="" />
                         <menuitem label="Existing ENI" value="eni" />
                         <menuitem label="New ENI" value="new" />
                       </menupopup>
                    </menulist>
                </row>
                <row>
                    <label control="ew.eniIndex" value="ENI Index:" />
                    <textbox id="ew.eniIndex" size="40" type="number" min="0" disabled="true" />
                </row>
                <row>
                    <label control="ew.eniDelete" value="Delete On Termination:" />
                    <checkbox id="ew.eniDelete" checked="true" disabled="true" />
                </row>
                <row>
                   <separator style="height:1px;width:100%;background-color:#cccccc;margin:5px 0px 5px 0px;"/>
                   <separator style="height:1px;width:100%;background-color:#cccccc;margin:5px 0px 5px 0px;"/>
                </row>
                <row>
                    <label control="ew.eniId" value="Existing ENI:" />
                    <menulist id="ew.eniId" crop="end" sizetopopup="none" style="max-width: 450px;" disabled="true" />
                </row>
                <row>
                   <separator style="height:1px;width:100%;background-color:#cccccc;margin:5px 0px 5px 0px;"/>
                   <separator style="height:1px;width:100%;background-color:#cccccc;margin:5px 0px 5px 0px;"/>
                </row>
                <row>
                    <label control="ew.eniDescr" value="New Interface Description:" />
                    <textbox id="ew.eniDescr" size="40" disabled="true" />
                </row>
                <row>
                    <label control="ew.eniIpAddress" value="Primary Private IP Address:" />
                    <textbox id="ew.eniIpAddress" size="40" disabled="true" />
                </row>
                <row>
                    <label control="ew.eniIpAddress2" value="Secondary Private IP Addresses:" />
                    <vbox>
                    <label control="ew.eniIpAddress2" value="Comma separated list of IPs" />
                    <textbox id="ew.eniIpAddress2" size="40" disabled="true" />
                    </vbox>
                </row>
                <row>
                    <label control="ew.eniSubnet" value="ENI Subnet:" />
                    <menulist id="ew.eniSubnet" crop="end" sizetopopup="none" style="max-width: 450px;" disabled="true" onselect="eniSubnetSelected()"/>
                </row>
                <row id="ew.eniGroupBox">
                    <label control="ew.eniGroups" value="Security Groups:" />
                </row>
            </rows>
         </grid>
        </tabpanel>

        <tabpanel orient="vertical" flex="1" style="-moz-appearance:tabpanel;" align="center">
         <grid flex="1">
            <columns flex="1">
                <column />
                <column />
            </columns>
            <rows flex="1">
                <row>
                    <label control="ew.ari" value="ARI ID:" />
                    <menulist id="ew.ari" value="" editable="true" crop="end" sizetopopup="none" style="max-width: 450px;" />
                </row>
                <row>
                    <label control="ew.aki" value="AKI ID:" />
                    <menulist id="ew.aki" value="" editable="true" crop="end" sizetopopup="none" style="max-width: 450px;" />
                </row>
                <row>
                    <label control="ew.properties" value="Additional Info:" />
                    <textbox id="ew.properties" size="40" />
                </row>
                <row>
                    <label control="ew.tag" value="Additional Instance Tag(s):" />
                    <textbox id="ew.tag" size="30" value="" />
                </row>
                <row>
                    <label control="ew.token" value="Client Token (Ensuring Idempotency):" />
                    <textbox id="ew.token" size="40" />
                </row>
                <row>
                    <label control="ew.shutdown" value="Instance Initiated Shutdown Behavior:" />
                    <menulist id="ew.shutdown">
                         <menupopup>
                            <menuitem label="Stop" value="stop"/>
                            <menuitem label="Terminate" value="terminate"/>
                         </menupopup>
                    </menulist>
                </row>
                <row>
                    <label control="ew.monitor" value="Enable Monitoring:" />
                    <checkbox id="ew.monitor" />
                </row>
                <row>
                    <label control="ew.disableApiTermination" value="Disable API Termination:" />
                    <checkbox id="ew.disableApiTermination" tooltiptext="Whether you can terminate the instance using the EC2 API. A value of true means you cannot terminate the instance using the API (i.e., the instance is locked); a value of false means you can. If you set this to true, and you later want to terminate the instance, you must first change the disableApiTermination attributes value to false using ModifyInstanceAttribute."/>
                </row>
                <row>
                    <label control="ew.ebsOptimized" value="EBS Optimized:" />
                    <checkbox id="ew.ebsOptimized" tooltiptext="Whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization is not available with all instance types. Additional usage charges apply when using an EBS Optimized instance."/>
                </row>
            </rows>
         </grid>
        </tabpanel>

        <tabpanel orient="vertical" flex="1" style="-moz-appearance:tabpanel;" align="center">
         <vbox flex="1">
           <hbox>
             <label control="ew.images.search" value="Filter:" />
             <textbox id="ew.images.search" size="15" type="autocomplete" autocompletesearch="form-history" onkeypress="imagesFilterChanged()" />
             <label control="ew.images.type" value="Category:" />
             <menulist id="ew.images.type" oncommand="imagesFilterChanged()" />
           </hbox>
           <label control="ew.images" value="Images:" />
           <listbox id="ew.images" flex="1" />
          </vbox>
        </tabpanel>

        <tabpanel orient="vertical" flex="1" style="-moz-appearance:tabpanel;" align="center">
         <grid flex="1">
            <columns flex="1">
                <column />
                <column />
            </columns>
            <rows flex="1">
                <row>
                    <label control="ew.spotPrice" value="Max Price:" />
                    <textbox id="ew.spotPrice" value="" type="number" decimalplaces="2" tooltiptext="The maximum hourly price for any Spot Instance launched to fulfill the request." />
                </row>
                <row>
                    <label control="ew.spotType" value="Persistent:" />
                    <checkbox id="ew.spotType" value="persistent" tooltiptext="Persistent Spot Instance requests remain active until they expire or you cancel them, even if the request was previously satisfied. For example, if you create a persistent Spot Instance request for one instance at $.30, Amazon EC2 launches or keeps your instance running if your maximum bid price is above $.30 and terminates your instance if your maximum bid price is below $.30." />
                </row>
                <row>
                    <label control="ew.validFrom" value="Valid From:" />
                    <textbox id="ew.validFrom" type="popup" value="" tooltiptext="The start date of the request in the form: YYYY-MM-DD. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled. Dates from the past are ignored" />
                </row>
                <row>
                    <label control="ew.validUntil" value="Valid Until:" />
                    <textbox id="ew.validUntil" type="popup" value="" tooltiptext="The end date of the request in the form YYYY-MM-DD. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date and time is reached. Dates from the past are ignored" />
                </row>
                <row>
                    <label control="ew.launchGroup" value="Launch Group:" />
                    <textbox id="ew.launchGroup" size="30" value="" tooltiptext="The instance launch group. Launch groups are Spot Instances that launch together and terminate together."/>
                </row>
                <row>
                    <label control="ew.availZoneGroup" value="Availibility Zone Group:" />
                    <textbox id="ew.availZoneGroup" size="30" value="" tooltiptext="The user-specified name for a logical grouping of bids. When you specify AvailabilityZoneGroup in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but choice of Availability Zone is not. AvailabilityZoneGroup applies only to bids for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same AvailabilityZoneGroup name will be launched in that same Availability Zone, as long as at least one instance from the group is still active. If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (i.e., all instances are terminated, the bid is expired, or the bid falls below current market), then Amazon EC2 will launch the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if the same AvailabilityZoneGroup name was specified."/>
                </row>
                <row>
                    <label control="ew.imageType" value="Image Filter:" />
                    <menulist id="ew.imageType" oncommand="spotFilterChanged();" />
                </row>
                <row>
                    <label control="ew.imageId" value="Image:" />
                    <menulist id="ew.imageId" crop="end" sizetopopup="none" style="max-width: 450px;" oncommand="spotImageSelected();"/>
                </row>
            </rows>
         </grid>
        </tabpanel>

      </tabpanels>
    </tabbox>
</dialog>

